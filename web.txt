<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Neural.YourName - Digital Architect</title>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Orbitron:wght@400;700;900&family=Rajdhani:wght@300;400;600&display=swap');
        
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Rajdhani', sans-serif;
            background: #000;
            color: #fff;
            overflow-x: hidden;
            cursor: none;
        }

        /* Custom Cursor */
        .custom-cursor {
            position: fixed;
            width: 20px;
            height: 20px;
            background: radial-gradient(circle, #ff0080, #00ff80);
            border-radius: 50%;
            pointer-events: none;
            z-index: 9999;
            mix-blend-mode: difference;
            transition: transform 0.1s ease;
        }

        .cursor-trail {
            position: fixed;
            width: 4px;
            height: 4px;
            background: #00ff80;
            border-radius: 50%;
            pointer-events: none;
            z-index: 9998;
            opacity: 0.7;
        }

        #canvas-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: -1;
        }

        /* Loading Screen */
        .loading-screen {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #000, #1a0033, #330066);
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            z-index: 10000;
            transition: opacity 2s ease, visibility 2s ease;
        }

        .loading-screen.hidden {
            opacity: 0;
            visibility: hidden;
        }

        .neural-loader {
            width: 100px;
            height: 100px;
            position: relative;
            margin-bottom: 2rem;
        }

        .neural-node {
            position: absolute;
            width: 10px;
            height: 10px;
            background: #00ff80;
            border-radius: 50%;
            box-shadow: 0 0 20px #00ff80;
        }

        .neural-connection {
            position: absolute;
            height: 2px;
            background: linear-gradient(90deg, #00ff80, #ff0080);
            transform-origin: left center;
            animation: pulse 2s ease-in-out infinite;
        }

        .loading-text {
            font-family: 'Orbitron', monospace;
            font-size: 1.5rem;
            color: #00ff80;
            text-transform: uppercase;
            letter-spacing: 3px;
            animation: glow 2s ease-in-out infinite alternate;
        }

        .container {
            max-width: 1400px;
            margin: 0 auto;
            padding: 0 20px;
            position: relative;
            z-index: 10;
        }

        /* Navigation */
        header {
            position: fixed;
            width: 100%;
            top: 0;
            z-index: 1000;
            backdrop-filter: blur(30px);
            background: rgba(0, 0, 0, 0.3);
            border-bottom: 1px solid rgba(0, 255, 128, 0.2);
        }

        nav {
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 1rem 0;
        }

        .logo {
            font-family: 'Orbitron', monospace;
            font-size: 2rem;
            font-weight: 900;
            background: linear-gradient(45deg, #00ff80, #ff0080, #8000ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            position: relative;
        }

        .logo::before {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            background: linear-gradient(45deg, #00ff80, #ff0080, #8000ff);
            border-radius: 10px;
            opacity: 0.1;
            z-index: -1;
            filter: blur(10px);
        }

        .nav-links {
            display: flex;
            list-style: none;
            gap: 2rem;
        }

        .nav-links a {
            text-decoration: none;
            color: #fff;
            font-weight: 600;
            text-transform: uppercase;
            letter-spacing: 1px;
            position: relative;
            padding: 0.5rem 1rem;
            transition: all 0.3s ease;
            border-radius: 20px;
        }

        .nav-links a::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(45deg, #00ff80, #ff0080);
            border-radius: 20px;
            opacity: 0;
            z-index: -1;
            transition: opacity 0.3s ease;
        }

        .nav-links a:hover::before {
            opacity: 0.2;
        }

        .nav-links a:hover {
            color: #00ff80;
            transform: translateY(-2px);
            text-shadow: 0 0 20px #00ff80;
        }

        /* Hero Section */
        .hero {
            min-height: 100vh;
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            position: relative;
            overflow: hidden;
        }

        .hero-content {
            z-index: 10;
            animation: materializeIn 3s ease-out;
        }

        .glitch-text {
            font-family: 'Orbitron', monospace;
            font-size: 6rem;
            font-weight: 900;
            margin-bottom: 1rem;
            position: relative;
            color: #fff;
            text-transform: uppercase;
            letter-spacing: 5px;
        }

        .glitch-text::before,
        .glitch-text::after {
            content: attr(data-text);
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
        }

        .glitch-text::before {
            animation: glitch1 2s infinite;
            color: #00ff80;
            z-index: -1;
        }

        .glitch-text::after {
            animation: glitch2 2s infinite;
            color: #ff0080;
            z-index: -2;
        }

        .subtitle {
            font-size: 2rem;
            margin-bottom: 2rem;
            background: linear-gradient(45deg, #00ff80, #ff0080, #8000ff);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
            animation: colorShift 3s ease-in-out infinite;
        }

        .cta-button {
            display: inline-block;
            padding: 20px 40px;
            background: transparent;
            color: #00ff80;
            text-decoration: none;
            border: 2px solid #00ff80;
            border-radius: 50px;
            font-weight: 700;
            text-transform: uppercase;
            letter-spacing: 2px;
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .cta-button::before {
            content: '';
            position: absolute;
            top: 0;
            left: -100%;
            width: 100%;
            height: 100%;
            background: linear-gradient(90deg, transparent, #00ff80, transparent);
            transition: left 0.5s ease;
        }

        .cta-button:hover {
            color: #000;
            background: #00ff80;
            box-shadow: 0 0 50px #00ff80;
            transform: translateY(-5px);
        }

        .cta-button:hover::before {
            left: 100%;
        }

        /* Morphing Sections */
        .morph-section {
            padding: 200px 0;
            position: relative;
            margin: 100px 0;
        }

        .morph-container {
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(20px);
            border-radius: 30px;
            border: 1px solid rgba(0, 255, 128, 0.3);
            padding: 3rem;
            position: relative;
            overflow: hidden;
        }

        .morph-container::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #00ff80, #ff0080, #8000ff, #00ff80);
            border-radius: 30px;
            z-index: -1;
            animation: borderRotate 4s linear infinite;
        }

        .section-title {
            font-family: 'Orbitron', monospace;
            font-size: 4rem;
            font-weight: 900;
            text-align: center;
            margin-bottom: 3rem;
            position: relative;
            text-transform: uppercase;
            letter-spacing: 3px;
        }

        .section-title.neon {
            color: #00ff80;
            text-shadow: 
                0 0 5px #00ff80,
                0 0 10px #00ff80,
                0 0 20px #00ff80,
                0 0 40px #00ff80;
        }

        /* About Portal */
        .about-portal {
            display: grid;
            grid-template-columns: 1fr 1fr;
            gap: 4rem;
            align-items: center;
        }

        .portal-content {
            font-size: 1.3rem;
            line-height: 2;
            color: #e0e0e0;
        }

        .portal-3d {
            height: 500px;
            position: relative;
            border-radius: 20px;
            overflow: hidden;
            border: 2px solid #00ff80;
            box-shadow: 0 0 50px rgba(0, 255, 128, 0.3);
        }

        /* Skill Constellation */
        .skill-constellation {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }

        .skill-orb {
            background: rgba(0, 0, 0, 0.8);
            backdrop-filter: blur(20px);
            padding: 2rem;
            border-radius: 50%;
            text-align: center;
            position: relative;
            transition: all 0.5s ease;
            border: 2px solid transparent;
            width: 250px;
            height: 250px;
            display: flex;
            flex-direction: column;
            justify-content: center;
            margin: 0 auto;
        }

        .skill-orb:hover {
            transform: scale(1.1) rotateY(15deg);
            border-color: #00ff80;
            box-shadow: 0 0 80px rgba(0, 255, 128, 0.5);
        }

        .skill-orb::before {
            content: '';
            position: absolute;
            top: -5px;
            left: -5px;
            right: -5px;
            bottom: -5px;
            background: conic-gradient(from 0deg, #00ff80, #ff0080, #8000ff, #00ff80);
            border-radius: 50%;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .skill-orb:hover::before {
            opacity: 0.3;
            animation: spin 3s linear infinite;
        }

        .skill-icon {
            font-size: 4rem;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #00ff80, #ff0080);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Project Dimensions */
        .project-dimensions {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(450px, 1fr));
            gap: 3rem;
            margin-top: 3rem;
        }

        .project-portal {
            background: rgba(0, 0, 0, 0.9);
            border-radius: 20px;
            overflow: hidden;
            position: relative;
            transition: all 0.5s ease;
            border: 1px solid rgba(0, 255, 128, 0.3);
        }

        .project-portal:hover {
            transform: perspective(1000px) rotateX(10deg) rotateY(10deg);
            box-shadow: 0 50px 100px rgba(0, 255, 128, 0.3);
        }

        .project-dimension {
            height: 300px;
            position: relative;
            background: linear-gradient(45deg, #1a0033, #330066, #0a0a2e);
            overflow: hidden;
        }

        .project-content {
            padding: 2rem;
        }

        .project-title {
            font-family: 'Orbitron', monospace;
            font-size: 2rem;
            margin-bottom: 1rem;
            color: #00ff80;
            text-shadow: 0 0 20px rgba(0, 255, 128, 0.5);
        }

        /* Certificate Vault */
        .certificate-vault {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
            gap: 2rem;
            margin-top: 3rem;
        }

        .cert-cube {
            background: rgba(0, 0, 0, 0.9);
            border-radius: 15px;
            overflow: hidden;
            position: relative;
            transition: all 0.5s ease;
            transform-style: preserve-3d;
        }

        .cert-cube:hover {
            transform: rotateY(180deg);
        }

        .cert-face {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            backface-visibility: hidden;
            border-radius: 15px;
            padding: 2rem;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }

        .cert-front {
            background: linear-gradient(45deg, #1a0033, #330066);
            border: 2px solid #ffd700;
        }

        .cert-back {
            background: linear-gradient(45deg, #330066, #1a0033);
            border: 2px solid #00ff80;
            transform: rotateY(180deg);
        }

        .cert-dimension {
            height: 200px;
            margin-bottom: 1rem;
        }

        /* Contact Nexus */
        .contact-nexus {
            background: radial-gradient(circle, rgba(0, 255, 128, 0.1), transparent);
            border-radius: 50px;
        }

        .nexus-content {
            text-align: center;
            max-width: 800px;
            margin: 0 auto;
        }

        .contact-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 2rem;
            margin: 3rem 0;
        }

        .contact-node {
            background: rgba(0, 0, 0, 0.8);
            padding: 2rem;
            border-radius: 20px;
            border: 2px solid transparent;
            position: relative;
            transition: all 0.3s ease;
            cursor: pointer;
        }

        .contact-node:hover {
            border-color: #00ff80;
            transform: translateY(-10px);
            box-shadow: 0 20px 40px rgba(0, 255, 128, 0.3);
        }

        .contact-node::before {
            content: '';
            position: absolute;
            top: -2px;
            left: -2px;
            right: -2px;
            bottom: -2px;
            background: linear-gradient(45deg, #00ff80, #ff0080, #8000ff);
            border-radius: 20px;
            z-index: -1;
            opacity: 0;
            transition: opacity 0.3s ease;
        }

        .contact-node:hover::before {
            opacity: 0.3;
        }

        .contact-icon {
            font-size: 3rem;
            margin-bottom: 1rem;
            background: linear-gradient(45deg, #00ff80, #ff0080);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        /* Animations */
        @keyframes glitch1 {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(-2px, 2px); }
            40% { transform: translate(-2px, -2px); }
            60% { transform: translate(2px, 2px); }
            80% { transform: translate(2px, -2px); }
        }

        @keyframes glitch2 {
            0%, 100% { transform: translate(0); }
            20% { transform: translate(2px, -2px); }
            40% { transform: translate(2px, 2px); }
            60% { transform: translate(-2px, -2px); }
            80% { transform: translate(-2px, 2px); }
        }

        @keyframes materializeIn {
            0% {
                opacity: 0;
                transform: translateY(50px) scale(0.8);
            }
            100% {
                opacity: 1;
                transform: translateY(0) scale(1);
            }
        }

        @keyframes colorShift {
            0%, 100% { filter: hue-rotate(0deg); }
            50% { filter: hue-rotate(90deg); }
        }

        @keyframes borderRotate {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        @keyframes pulse {
            0%, 100% { opacity: 0.4; transform: scaleX(1); }
            50% { opacity: 1; transform: scaleX(1.2); }
        }

        @keyframes glow {
            0%, 100% { text-shadow: 0 0 20px #00ff80; }
            50% { text-shadow: 0 0 40px #00ff80, 0 0 60px #00ff80; }
        }

        @keyframes float {
            0%, 100% { transform: translateY(0px); }
            50% { transform: translateY(-20px); }
        }

        /* Responsive */
        @media (max-width: 768px) {
            .nav-links { display: none; }
            .glitch-text { font-size: 3rem; }
            .about-portal { grid-template-columns: 1fr; }
            .project-dimensions { grid-template-columns: 1fr; }
            .contact-grid { grid-template-columns: 1fr; }
        }
    </style>
</head>
<body>
    <!-- Custom Cursor -->
    <div class="custom-cursor"></div>
    
    <!-- Loading Screen -->
    <div class="loading-screen" id="loadingScreen">
        <div class="neural-loader">
            <div class="neural-node" style="top: 20px; left: 45px;"></div>
            <div class="neural-node" style="top: 45px; left: 20px;"></div>
            <div class="neural-node" style="top: 45px; left: 70px;"></div>
            <div class="neural-node" style="top: 70px; left: 45px;"></div>
            <div class="neural-connection" style="top: 25px; left: 45px; width: 30px; transform: rotate(45deg);"></div>
            <div class="neural-connection" style="top: 50px; left: 25px; width: 40px;"></div>
            <div class="neural-connection" style="top: 50px; left: 50px; width: 30px; transform: rotate(-45deg);"></div>
        </div>
        <div class="loading-text">Initializing Neural Network...</div>
    </div>

    <div id="canvas-container"></div>
    
    <header>
        <nav class="container">
            <div class="logo">NEURAL.DEV</div>
            <ul class="nav-links">
                <li><a href="#home">Home</a></li>
                <li><a href="#about">About</a></li>
                <li><a href="#skills">Skills</a></li>
                <li><a href="#projects">Projects</a></li>
                <li><a href="#certificates">Certs</a></li>
                <li><a href="#contact">Contact</a></li>
            </ul>
        </nav>
    </header>

    <section id="home" class="hero">
        <div class="hero-content">
            <h1 class="glitch-text" data-text="YOUR NAME">YOUR NAME</h1>
            <p class="subtitle">Digital Reality Architect & Neural Code Weaver</p>
            <a href="#about" class="cta-button">Enter The Matrix</a>
        </div>
    </section>

    <section id="about" class="morph-section">
        <div class="container">
            <div class="morph-container">
                <h2 class="section-title neon">About Portal</h2>
                <div class="about-portal">
                    <div class="portal-content">
                        <p>I exist at the intersection of imagination and technology, crafting digital experiences that bend reality and challenge perception.</p>
                        <p>As a neural architect of the web, I specialize in creating immersive 3D environments, interactive installations, and mind-bending user interfaces that transport users to new dimensions.</p>
                        <p>My code doesn't just run—it evolves, adapts, and creates living digital ecosystems that respond to human consciousness.</p>
                    </div>
                    <div class="portal-3d" id="about-portal"></div>
                </div>
            </div>
        </div>
    </section>

    <section id="skills" class="morph-section">
        <div class="container">
            <div class="morph-container">
                <h2 class="section-title neon">Skill Constellation</h2>
                <div class="skill-constellation">
                    <div class="skill-orb">
                        <div class="skill-icon">🌌</div>
                        <h3>Reality Engineering</h3>
                        <p>WebXR, Three.js, A-Frame, Quantum Computing Interfaces</p>
                    </div>
                    <div class="skill-orb">
                        <div class="skill-icon">🧠</div>
                        <h3>Neural Networks</h3>
                        <p>AI/ML Integration, TensorFlow.js, Brain-Computer Interfaces</p>
                    </div>
                    <div class="skill-orb">
                        <div class="skill-icon">⚡</div>
                        <h3>Quantum Frontend</h3>
                        <p>React Quantum, Vue Multiverse, Dimensional CSS</p>
                    </div>
                    <div class="skill-orb">
                        <div class="skill-icon">🔮</div>
                        <h3>Data Alchemy</h3>
                        <p>Blockchain, Holographic Databases, Time-Series Prediction</p>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="projects" class="morph-section">
        <div class="container">
            <div class="morph-container">
                <h2 class="section-title neon">Project Dimensions</h2>
                <div class="project-dimensions">
                    <div class="project-portal">
                        <div class="project-dimension" id="project-dim-1"></div>
                        <div class="project-content">
                            <h3 class="project-title">Metaverse Commerce Hub</h3>
                            <p>A parallel-universe shopping experience where customers can teleport between product dimensions and interact with AI-powered holographic assistants.</p>
                        </div>
                    </div>
                    <div class="project-portal">
                        <div class="project-dimension" id="project-dim-2"></div>
                        <div class="project-content">
                            <h3 class="project-title">Neural Music Visualizer</h3>
                            <p>Brain-wave responsive music visualization that creates living art installations based on the listener's emotional state and neural patterns.</p>
                        </div>
                    </div>
                    <div class="project-portal">
                        <div class="project-dimension" id="project-dim-3"></div>
                        <div class="project-content">
                            <h3 class="project-title">Time-Traveling Portfolio</h3>
                            <p>A temporal interface that allows visitors to experience different eras of web design while maintaining quantum coherence across timelines.</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="certificates" class="morph-section">
        <div class="container">
            <div class="morph-container">
                <h2 class="section-title neon">Certification Vault</h2>
                <div class="certificate-vault">
                    <div class="cert-cube">
                        <div class="cert-face cert-front">
                            <div class="cert-dimension" id="cert-dim-1"></div>
                            <h3>Quantum Developer</h3>
                            <p>Multiverse Academy</p>
                        </div>
                        <div class="cert-face cert-back">
                            <h3>Skills Unlocked:</h3>
                            <p>• Parallel Reality Coding<br>• Quantum State Management<br>• Dimensional Debugging</p>
                        </div>
                    </div>
                    <div class="cert-cube">
                        <div class="cert-face cert-front">
                            <div class="cert-dimension" id="cert-dim-2"></div>
                            <h3>Neural Architect</h3>
                            <p>Digital Consciousness Institute</p>
                        </div>
                        <div class="cert-face cert-back">
                            <h3>Skills Unlocked:</h3>
                            <p>• Brain-Web Interfaces<br>• Thought-Responsive UX<br>• Consciousness Mapping</p>
                        </div>
                    </div>
                    <div class="cert-cube">
                        <div class="cert-face cert-front">
                            <div class="cert-dimension" id="cert-dim-3"></div>
                            <h3>Reality Hacker</h3>
                            <p>Matrix Protocol Foundation</p>
                        </div>
                        <div class="cert-face cert-back">
                            <h3>Skills Unlocked:</h3>
                            <p>• Physics Engine Bending<br>• Glitch Art Programming<br>• Impossible Geometries</p>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <section id="contact" class="morph-section">
        <div class="container">
            <div class="morph-container contact-nexus">
                <div class="nexus-content">
                    <h2 class="section-title neon">Contact Nexus</h2>
                    <p style="font-size: 1.5rem; margin-bottom: 2rem;">Ready to hack reality together? Let's create something that breaks the matrix.</p>
                    <div class="contact-grid">
                        <div class="contact-node">
                            <div class="contact-icon">📡</div>
                            <h3>Neural Link</h3>
                            <p>mind@neural.dev</p>
                        </div>
                        <div class="contact-node">
                            <div class="contact-icon">🌐</div>
                            <h3>GitHub Dimension</h3>
                            <p>github.com/neural</p>
                        </div>
                        <div class="contact-node">
                            <div class="contact-icon">🔗</div>
                            <h3>LinkedIn Portal</h3>
                            <p>linkedin.com/neural</p>
                        </div>
                        <div class="contact-node">
                            <div class="contact-icon">🚀</div>
                            <h3>Discord Server</h3>
                            <p>Neural#0001</p>
                        </div>
                    </div>
                    <a href="mailto:mind@neural.dev" class="cta-button">Initiate Connection</a>
                </div>
            </div>
        </div>
    </section>

    <script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>
    <script>
        // Loading Screen
        window.addEventListener('load', () => {
            setTimeout(() => {
                document.getElementById('loadingScreen').classList.add('hidden');
            }, 3000);
        });

        // Custom Cursor
        const cursor = document.querySelector('.custom-cursor');
        const trailElements = [];
        
        for (let i = 0; i < 10; i++) {
            const trail = document.createElement('div');
            trail.className = 'cursor-trail';
            document.body.appendChild(trail);
            trailElements.push(trail);
        }

        let mouseX = 0, mouseY = 0;
        let trailIndex = 0;

        document.addEventListener('mousemove', (e) => {
            mouseX = e.clientX;
            mouseY = e.clientY;
            
            cursor.style.left = mouseX - 10 + 'px';
            cursor.style.top = mouseY - 10 + 'px';
            
            // Trail effect
            const trail = trailElements[trailIndex];
            trail.style.left = mouseX - 2 + 'px';
            trail.style.top = mouseY - 2 + 'px';
            trail.style.opacity = '0.7';
            
            setTimeout(() => {
                trail.style.opacity = '0';
            }, 200);
            
            trailIndex = (trailIndex + 1) % trailElements.length;
        });

        // Three.js Scene Setup
        let scene, camera, renderer, composer;
        let particles, morphingMesh, portalMesh;
        let clock = new THREE.Clock();
        
        function initThreeJS() {
            // Scene setup
            scene = new THREE.Scene();
            camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
            renderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
            renderer.setSize(window.innerWidth, window.innerHeight);
            renderer.setClearColor(0x000000, 0);
            document.getElementById('canvas-container').appendChild(renderer.domElement);

            // Create neural network particles
            createNeuralNetwork();
            
            // Create morphing geometries
            createMorphingGeometries();
            
            // Create dimensional portals
            createDimensionalPortals();
            
            // Create section-specific 3D elements
            createAboutPortal();
            createProjectDimensions();
            createCertificateDimensions();

            camera.position.z = 10;
            
            // Start animation loop
            animate();
        }

        function createNeuralNetwork() {
            const geometry = new THREE.BufferGeometry();
            const vertices = [];
            const colors = [];
            const connections = [];

            // Create neural nodes
            for (let i = 0; i < 2000; i++) {
                vertices.push(
                    (Math.random() - 0.5) * 200,
                    (Math.random() - 0.5) * 200,
                    (Math.random() - 0.5) * 200
                );
                
                // Color based on position for neural effect
                const hue = (vertices[i * 3] + 100) / 200;
                const color = new THREE.Color().setHSL(hue * 0.3 + 0.5, 0.8, 0.6);
                colors.push(color.r, color.g, color.b);
            }

            geometry.setAttribute('position', new THREE.Float32BufferAttribute(vertices, 3));
            geometry.setAttribute('color', new THREE.Float32BufferAttribute(colors, 3));

            const material = new THREE.PointsMaterial({
                size: 3,
                vertexColors: true,
                blending: THREE.AdditiveBlending,
                transparent: true,
                opacity: 0.8
            });

            particles = new THREE.Points(geometry, material);
            scene.add(particles);

            // Create connections between nearby particles
            createNeuralConnections();
        }

        function createNeuralConnections() {
            const positions = particles.geometry.attributes.position.array;
            const lineGeometry = new THREE.BufferGeometry();
            const lineVertices = [];
            const lineColors = [];

            for (let i = 0; i < positions.length; i += 9) {
                const x1 = positions[i];
                const y1 = positions[i + 1];
                const z1 = positions[i + 2];

                for (let j = i + 9; j < Math.min(i + 90, positions.length); j += 9) {
                    const x2 = positions[j];
                    const y2 = positions[j + 1];
                    const z2 = positions[j + 2];

                    const distance = Math.sqrt((x2-x1)**2 + (y2-y1)**2 + (z2-z1)**2);
                    
                    if (distance < 20) {
                        lineVertices.push(x1, y1, z1, x2, y2, z2);
                        
                        const intensity = 1 - distance / 20;
                        lineColors.push(0, intensity, intensity * 0.5);
                        lineColors.push(intensity * 0.5, 0, intensity);
                    }
                }
            }

            lineGeometry.setAttribute('position', new THREE.Float32BufferAttribute(lineVertices, 3));
            lineGeometry.setAttribute('color', new THREE.Float32BufferAttribute(lineColors, 3));

            const lineMaterial = new THREE.LineBasicMaterial({
                vertexColors: true,
                blending: THREE.AdditiveBlending,
                transparent: true,
                opacity: 0.3
            });

            const lines = new THREE.LineSegments(lineGeometry, lineMaterial);
            scene.add(lines);
        }

        function createMorphingGeometries() {
            // Morphing torus that changes shape
            const torusGeometry = new THREE.TorusGeometry(5, 2, 16, 100);
            const torusMaterial = new THREE.MeshBasicMaterial({
                color: 0x00ff80,
                wireframe: true,
                transparent: true,
                opacity: 0.3
            });
            
            morphingMesh = new THREE.Mesh(torusGeometry, torusMaterial);
            morphingMesh.position.set(-30, 10, -20);
            scene.add(morphingMesh);

            // Add floating geometric shapes
            const shapes = [
                new THREE.OctahedronGeometry(3),
                new THREE.IcosahedronGeometry(2.5),
                new THREE.DodecahedronGeometry(2.8)
            ];

            shapes.forEach((geometry, index) => {
                const material = new THREE.MeshBasicMaterial({
                    color: new THREE.Color().setHSL(index * 0.3, 0.8, 0.6),
                    wireframe: true,
                    transparent: true,
                    opacity: 0.4
                });

                const mesh = new THREE.Mesh(geometry, material);
                mesh.position.set(
                    (Math.random() - 0.5) * 60,
                    (Math.random() - 0.5) * 40,
                    (Math.random() - 0.5) * 40
                );
                scene.add(mesh);
            });
        }

        function createDimensionalPortals() {
            // Create portal ring
            const ringGeometry = new THREE.RingGeometry(8, 10, 32);
            const ringMaterial = new THREE.MeshBasicMaterial({
                color: 0xff0080,
                transparent: true,
                opacity: 0.6,
                side: THREE.DoubleSide
            });

            portalMesh = new THREE.Mesh(ringGeometry, ringMaterial);
            portalMesh.position.set(25, -15, -30);
            portalMesh.rotation.x = Math.PI / 4;
            scene.add(portalMesh);
        }

        function createAboutPortal() {
            const container = document.getElementById('about-portal');
            if (!container) return;

            const portalScene = new THREE.Scene();
            const portalCamera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
            const portalRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
            
            portalRenderer.setSize(container.offsetWidth, container.offsetHeight);
            portalRenderer.setClearColor(0x000000, 1);
            container.appendChild(portalRenderer.domElement);

            // Create swirling galaxy effect
            const galaxyGeometry = new THREE.BufferGeometry();
            const galaxyVertices = [];
            const galaxyColors = [];

            for (let i = 0; i < 5000; i++) {
                const radius = Math.random() * 50;
                const angle = Math.random() * Math.PI * 2;
                const height = (Math.random() - 0.5) * 10;

                galaxyVertices.push(
                    Math.cos(angle) * radius,
                    height,
                    Math.sin(angle) * radius
                );

                const hue = (radius / 50) * 0.3 + 0.6;
                const color = new THREE.Color().setHSL(hue, 0.8, 0.7);
                galaxyColors.push(color.r, color.g, color.b);
            }

            galaxyGeometry.setAttribute('position', new THREE.Float32BufferAttribute(galaxyVertices, 3));
            galaxyGeometry.setAttribute('color', new THREE.Float32BufferAttribute(galaxyColors, 3));

            const galaxyMaterial = new THREE.PointsMaterial({
                size: 2,
                vertexColors: true,
                blending: THREE.AdditiveBlending,
                transparent: true
            });

            const galaxy = new THREE.Points(galaxyGeometry, galaxyMaterial);
            portalScene.add(galaxy);

            portalCamera.position.z = 30;

            function animatePortal() {
                requestAnimationFrame(animatePortal);
                galaxy.rotation.y += 0.002;
                galaxy.rotation.z += 0.001;
                portalRenderer.render(portalScene, portalCamera);
            }
            animatePortal();
        }

        function createProjectDimensions() {
            ['project-dim-1', 'project-dim-2', 'project-dim-3'].forEach((id, index) => {
                const container = document.getElementById(id);
                if (!container) return;

                const projScene = new THREE.Scene();
                const projCamera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
                const projRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
                
                projRenderer.setSize(container.offsetWidth, container.offsetHeight);
                projRenderer.setClearColor(0x1a0033, 1);
                container.appendChild(projRenderer.domElement);

                let mesh;
                switch(index) {
                    case 0:
                        // Fractal cube for metaverse
                        const cubeGeometry = new THREE.BoxGeometry(3, 3, 3);
                        const cubeMaterial = new THREE.MeshBasicMaterial({
                            color: 0x00ff80,
                            wireframe: true
                        });
                        mesh = new THREE.Mesh(cubeGeometry, cubeMaterial);
                        
                        // Add smaller cubes
                        for (let i = 0; i < 8; i++) {
                            const smallCube = new THREE.Mesh(
                                new THREE.BoxGeometry(1, 1, 1),
                                new THREE.MeshBasicMaterial({ color: 0xff0080, wireframe: true })
                            );
                            smallCube.position.set(
                                (i % 2 - 0.5) * 4,
                                (Math.floor(i / 2) % 2 - 0.5) * 4,
                                (Math.floor(i / 4) - 0.5) * 4
                            );
                            projScene.add(smallCube);
                        }
                        break;
                    case 1:
                        // DNA helix for neural music
                        const helixGeometry = new THREE.BufferGeometry();
                        const helixVertices = [];
                        for (let i = 0; i < 200; i++) {
                            const t = i / 20;
                            helixVertices.push(
                                Math.cos(t) * 2,
                                t * 0.1,
                                Math.sin(t) * 2
                            );
                        }
                        helixGeometry.setAttribute('position', new THREE.Float32BufferAttribute(helixVertices, 3));
                        
                        const helixMaterial = new THREE.PointsMaterial({
                            color: 0xff0080,
                            size: 4
                        });
                        mesh = new THREE.Points(helixGeometry, helixMaterial);
                        break;
                    case 2:
                        // Time spiral
                        const spiralGeometry = new THREE.TorusKnotGeometry(2, 0.5, 100, 16);
                        const spiralMaterial = new THREE.MeshBasicMaterial({
                            color: 0xffff00,
                            wireframe: true
                        });
                        mesh = new THREE.Mesh(spiralGeometry, spiralMaterial);
                        break;
                }

                projScene.add(mesh);
                projCamera.position.z = 8;

                function animateProject() {
                    requestAnimationFrame(animateProject);
                    mesh.rotation.x += 0.005;
                    mesh.rotation.y += 0.01;
                    projRenderer.render(projScene, projCamera);
                }
                animateProject();
            });
        }

        function createCertificateDimensions() {
            ['cert-dim-1', 'cert-dim-2', 'cert-dim-3'].forEach((id, index) => {
                const container = document.getElementById(id);
                if (!container) return;

                const certScene = new THREE.Scene();
                const certCamera = new THREE.PerspectiveCamera(75, container.offsetWidth / container.offsetHeight, 0.1, 1000);
                const certRenderer = new THREE.WebGLRenderer({ alpha: true, antialias: true });
                
                certRenderer.setSize(container.offsetWidth, container.offsetHeight);
                certRenderer.setClearColor(0x330066, 1);
                container.appendChild(certRenderer.domElement);

                let mesh;
                const goldMaterial = new THREE.MeshBasicMaterial({
                    color: 0xffd700,
                    wireframe: true
                });

                switch(index) {
                    case 0:
                        // Quantum cube
                        mesh = new THREE.Mesh(new THREE.BoxGeometry(2, 2, 2), goldMaterial);
                        break;
                    case 1:
                        // Neural sphere
                        mesh = new THREE.Mesh(new THREE.SphereGeometry(1.5, 32, 32), goldMaterial);
                        break;
                    case 2:
                        // Reality pyramid
                        mesh = new THREE.Mesh(new THREE.ConeGeometry(1.5, 3, 4), goldMaterial);
                        break;
                }

                certScene.add(mesh);
                certCamera.position.z = 5;

                function animateCert() {
                    requestAnimationFrame(animateCert);
                    mesh.rotation.x += 0.01;
                    mesh.rotation.y += 0.015;
                    certRenderer.render(certScene, certCamera);
                }
                animateCert();
            });
        }

        function animate() {
            requestAnimationFrame(animate);
            
            const time = clock.getElapsedTime();
            
            // Animate neural network
            if (particles) {
                particles.rotation.y += 0.0005;
                particles.position.y = Math.sin(time * 0.5) * 2;
                
                // Pulse effect on particles
                const positions = particles.geometry.attributes.position.array;
                for (let i = 0; i < positions.length; i += 3) {
                    positions[i + 1] += Math.sin(time + positions[i] * 0.01) * 0.01;
                }
                particles.geometry.attributes.position.needsUpdate = true;
            }
            
            // Animate morphing torus
            if (morphingMesh) {
                morphingMesh.rotation.x += 0.01;
                morphingMesh.rotation.y += 0.005;
                morphingMesh.scale.setScalar(1 + Math.sin(time) * 0.2);
            }
            
            // Animate portal
            if (portalMesh) {
                portalMesh.rotation.z += 0.02;
                portalMesh.material.opacity = 0.6 + Math.sin(time * 2) * 0.3;
            }
            
            // Camera movement based on mouse
            camera.position.x += (mouseX * 0.00005 - camera.position.x) * 0.05;
            camera.position.y += (-mouseY * 0.00005 - camera.position.y) * 0.05;
            camera.lookAt(scene.position);
            
            renderer.render(scene, camera);
        }

        // Smooth scrolling
        document.querySelectorAll('a[href^="#"]').forEach(anchor => {
            anchor.addEventListener('click', function (e) {
                e.preventDefault();
                const target = document.querySelector(this.getAttribute('href'));
                if (target) {
                    target.scrollIntoView({
                        behavior: 'smooth',
                        block: 'start'
                    });
                }
            });
        });

        // Scroll animations
        const observerOptions = {
            threshold: 0.1,
            rootMargin: '0px 0px -100px 0px'
        };

        const observer = new IntersectionObserver((entries) => {
            entries.forEach(entry => {
                if (entry.isIntersecting) {
                    entry.target.style.opacity = '1';
                    entry.target.style.transform = 'translateY(0) scale(1)';
                }
            });
        }, observerOptions);

        // Observe elements for animation
        document.querySelectorAll('.skill-orb, .project-portal, .cert-cube, .contact-node').forEach(el => {
            el.style.opacity = '0';
            el.style.transform = 'translateY(50px) scale(0.8)';
            el.style.transition = 'opacity 1s ease, transform 1s ease';
            observer.observe(el);
        });

        // Window resize
        window.addEventListener('resize', () => {
            if (camera && renderer) {
                camera.aspect = window.innerWidth / window.innerHeight;
                camera.updateProjectionMatrix();
                renderer.setSize(window.innerWidth, window.innerHeight);
            }
        });

        // Initialize everything
        initThreeJS();
    </script>
</body>
</html>